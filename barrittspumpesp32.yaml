esphome:
  name: barrittspumpesp32

esp32:
  board: esp32-poe
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  platform: esphome
  password: ""

# wifi: # Can't use wifi and ethernet at the same time
#  ssid: !secret farm_wifi_ssid
#  password: !secret farm_wifi_pw

#  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "Barrittspumpesp32"
#    password: !secret fallback_ap_pw

# captive_portal:

# Custom stuff below:

# Ethernet port for ESP32-PoE board
ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 0
  power_pin: GPIO12

binary_sensor:
  # Sense the optocoupler pulling low when on
  - platform: gpio
    pin:
      number: 5 # GPIO5 is UEXT1 pin 10. No UART output if driven low when booting MCU
      inverted: true
      mode:
        input: true
        # We don't need a pullup, HW has a 10k pullup

    name: "Barritt South Pump Running"
    device_class: power
    filters:
      - delayed_on: 300ms
      - delayed_off: 1000ms

sensor:
  # Sense the 5V on the circuit: GND-100k-pin-47k-5V divider.
  - platform: adc

    pin: 39 # GPI39 on esp32-PoE
    attenuation: 12dB # Need max attenuation.
    name: "5V rail"
    filters:
      # resistors are 100k below, 47k above. So the value should be multiplied by 1.47 to get the value.
      # However, multiply: 1.47 had it reporting 4.58V when it was actually 5.19V. 1.47*(5.19/4.58) = 1.665786
      - multiply: 1.67
    update_interval: 120s
    accuracy_decimals: 3

  # Sense the 4-20mA on pin GPI35
  - platform: adc
    pin: 35 # GPI35 on esp32-PoE
    # With a 100 Ohm resistor, v=IR says that 4mA will be 400mV, 20mA would be 2000mV. But this sensor is to 5 meters, and we only need 2 feet.
    # At 1 meter, we would have 7.2mA current, so 720mV. 0dB attenuation goes up to VREF, which is about 1000-1200mV, so that should be good.
    attenuation: 0dB 
    name: "Barritt South Sump Level ADC"
    filters:
      - sliding_window_moving_average:
          window_size: 6
          send_every: 6
          send_first_at: 6
    update_interval: 5s # will report every update_interval * send_every seconds.
    accuracy_decimals: 3 # want milliVolts, that is 3 places. ESP32 surely isn't this good tho.
